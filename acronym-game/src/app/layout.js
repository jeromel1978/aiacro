"use client"; // Required for useSession, signIn, signOut at the top level or in child

"use client"; // Required for useSession, signIn, signOut at the top level or in child

import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { SessionProvider, useSession, signIn, signOut } from "next-auth/react";
import { ThemeProvider, useTheme } from "next-themes";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Moon, Sun } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose, // Added DialogClose
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input"; // Already added, but good for context
import { Label } from "@/components/ui/label"; // Already added, but good for context
import { useState, useEffect } from "react"; // For dialog state and input

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// Header component that uses useSession
function AuthHeader() {
  const { data: session, status } = useSession();
  const { setTheme } = useTheme();
  const [isEditNameDialogOpen, setIsEditNameDialogOpen] = useState(false);
  const [currentUsername, setCurrentUsername] = useState("");

  useEffect(() => {
    if (session?.user?.username) {
      setCurrentUsername(session.user.username);
    } else if (session?.user?.name) {
      setCurrentUsername(session.user.name);
    } else {
      setCurrentUsername("");
    }
  }, [session]);

  if (status === "loading") {
    return <div className="h-16 border-b flex items-center justify-center">Loading...</div>; // Placeholder for loading state
  }

  const handleNameSave = () => {
    // For now, just closes the dialog.
    // Later, this will involve calling an API to update the name.
    console.log("New name to save:", currentUsername);
    setIsEditNameDialogOpen(false);
  };

  return (
    <header className="border-b dark:border-gray-700">
      <div className="container mx-auto flex items-center justify-between p-4">
        <Link href="/" className="text-2xl font-bold text-gray-800 dark:text-white">
          Acro
        </Link>
        <div className="flex items-center space-x-3">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="icon">
                <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
                <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
                <span className="sr-only">Toggle theme</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => setTheme("light")}>Light</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setTheme("dark")}>Dark</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setTheme("system")}>System</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          {session ? (
            <>
              <Dialog open={isEditNameDialogOpen} onOpenChange={setIsEditNameDialogOpen}>
                <DialogTrigger asChild>
                  <Button variant="outline" size="sm">
                    Edit Name
                  </Button>
                </DialogTrigger>
                <DialogContent className="sm:max-w-[425px]">
                  <DialogHeader>
                    <DialogTitle>Edit Player Name</DialogTitle>
                    <DialogDescription>
                      Make changes to your player name here. Click save when you&apos;re done.
                    </DialogDescription>
                  </DialogHeader>
                  <div className="grid gap-4 py-4">
                    <div className="grid grid-cols-4 items-center gap-4">
                      <Label htmlFor="username-edit" className="text-right">
                        Username
                      </Label>
                      <Input
                        id="username-edit"
                        value={currentUsername}
                        onChange={(e) => setCurrentUsername(e.target.value)}
                        className="col-span-3"
                      />
                    </div>
                  </div>
                  <DialogFooter>
                    <DialogClose asChild>
                      <Button type="button" variant="outline" onClick={() => setIsEditNameDialogOpen(false)}>
                        Cancel
                      </Button>
                    </DialogClose>
                    <Button type="button" onClick={handleNameSave}>
                      Save changes
                    </Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>

              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-700 dark:text-gray-300 hidden sm:inline">
                  Welcome, {session.user?.username || session.user?.name}
                </span>
                <Button variant="outline" size="sm" onClick={() => signOut({ callbackUrl: "/" })}>
                  Sign Out
                </Button>
              </div>
            </>
          ) : (
            <Button onClick={() => signIn()} size="sm">
              Sign In
            </Button>
          )}
        </div>
      </div>
    </header>
  );
}

// Main RootLayout needs to be a client component if AuthHeader is directly part of its JSX
// and uses client hooks, or AuthHeader itself is a client component imported.
// For simplicity here, making RootLayout itself a client component wrapper for SessionProvider
// and then AuthHeader can be used within it.

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
          <SessionProvider>
            <AuthHeader />
            <main>{children}</main>
          </SessionProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
